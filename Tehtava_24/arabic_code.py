# -*- coding: utf-8 -*-
# برنامج تجريبي يستخدم معرفات عربية في بايثون
# يتكون من عدة وظائف بسيطة لإدارة خطة وجبات صغيرة

from typing import List, Dict
import random

# بيانات طعام تجريبية (الاسم, سعرات لكل حصة)
قائمة_الأطعمة = [
    ("تفاح", 52),
    ("موز", 89),
    ("خبز", 265),
    ("جبن", 402),
    ("دجاج مشوي", 239),
    ("أرز", 130),
    ("سلطة", 15),
    ("لبن", 59),
    ("بيض", 155),
    ("سمك", 206),
]

def اختيار_عشوائي(قائمة: List[tuple], عدد: int) -> List[tuple]:
    """إرجاع عناصر عشوائية من القائمة بدون تكرار."""
    return random.sample(قائمة, k=min(عدد, len(قائمة)))

def حساب_السعرات(وجبات: List[tuple]) -> int:
    """جمع السعرات الحرارية لوجبات معينة."""
    مجموع = 0
    for اسم, سعرات in وجبات:
        مجموع += سعرات
    return مجموع

def تحويل_حجم(سعرات: int, عامل: float) -> int:
    """تحويل السعرات عند تغيير حجم الحصة."""
    # عامل <1 للتقليل، >1 للزيادة
    نتيجة = int(round(سعرات * عامل))
    return نتيجة

def توليد_خطة_يومية(هدف_سعرات: int, وجبات_في_اليوم: int = 3) -> Dict[str, object]:
    """ينشئ خطة وجبات يومية تقارب الهدف المطلوب من السعرات."""
    محاولة = 0
    while محاولة < 50:
        محاولة += 1
        مقترحات = اختيار_عشوائي(قائمة_الأطعمة, وجبات_في_اليوم)
        مجموع = حساب_السعرات(مقترحات)
        # إذا كان قريبًا من الهدف نعيده
        if abs(mجموع - هدف_سعرات) <= 150:
            # ضبط أحجام الحصص قليلاً لتقريب المجموع
            تعديلات = []
            مجموع_نهائي = 0
            for اسم, سعرات in مقترحات:
                # نولد عامل بين 0.8 و1.2
                عامل = random.uniform(0.8, 1.2)
                سعر_معدل = تحويل_حجم(سعرات, عامل)
                تعديلات.append((اسم, سعر_معدل))
                مجموع_نهائي += سعر_معدل
            return {"وجبات": تعديلات, "مجموع_السعرات": مجموع_نهائي, "محاولات": محاولة}
    # إذا فشلنا في الاقتراب نعيد أفضل محاولة عشوائية
    مقترحات = اختيار_عشوائي(قائمة_الأطعمة, وجبات_في_اليوم)
    مجموع = حساب_السعرات(مقترحات)
    return {"وجبات": مقترحات, "مجموع_السعرات": مجموع, "محاولات": محاولة}

def طباعة_الخطة(خطة: Dict[str, object]) -> None:
    """طباعة الخطة بصيغة مقروءة."""
    وجبات = خطة["وجبات"]
    مجموع = خطة["مجموع_السعرات"]
    محاولات = خطة["محاولات"]
    print("خطة الوجبات اليومية (بعد", محاولات, "محاولة):")
    for idx, (اسم, سعرات) in enumerate(وجبات, start=1):
        print(f" {idx}. {اسم} — {سعرات} كيلوكالوري")
    print("مجموع السعرات:", مجموع, "kcal")

def مثال_تشغيلي() -> None:
    """وظيفة لتشغيل مثال على الخطة."""
    أهداف = [1800, 2000, 2200]
    for هدف in أهداف:
        print("\n=== إنشاء خطة لهدف", هدف, "ككالس ===")
        خطة = توليد_خطة_يومية(هدف_سعرات=هدف, وجبات_في_اليوم=3)
        طباعة_الخطة(خطة)

def main() -> None:
    """نقطة الدخول الرئيسية."""
    print("برنامج أمثلة لخطة وجبات مع معرفات عربية.")
    # تشغيل المثال
    مثال_تشغيلي()

if __name__ == "__main__":
    main()
